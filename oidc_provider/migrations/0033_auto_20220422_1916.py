# Generated by Django 3.2.7 on 2022-04-22 19:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oidc_provider', '0032_auto_20220420_0035'),
    ]

    operations = [
        migrations.RenameField(
            model_name='client',
            old_name='jwt_alg',
            new_name='idtoken_alg',
        ),
        migrations.RemoveField(
            model_name='client',
            name='jwt_alg_at',
        ),
        migrations.AddField(
            model_name='client',
            name='at_alg',
            field=models.CharField(choices=[('Opaque', 'None'), ('HS256', 'HS256'), ('RS256', 'RS256')], default='RS256', help_text='Algorithm used to encode Access Tokens.', max_length=10, null=True, verbose_name='Access Token JWT Algorithm'),
        ),
        migrations.AddField(
            model_name='client',
            name='at_jwe_alg',
            field=models.CharField(choices=[('RSA-OAEP', 'RSAES OAEP using default parameters'), ('RSA-OAEP-256', 'RSAES OAEP using SHA-256 and MGF1 with SHA-256'), ('A128KW', 'AES Key Wrap with default initial value using 128 bit key'), ('A192KW', 'AES Key Wrap with default initial value using 192 bit key'), ('A256KW', 'AES Key Wrap with default initial value using 256 bit key'), ('dir', 'Direct use of a shared symmetric key as the CEK'), ('ECDH-ES', 'Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF'), ('ECDH-ES+A128KW', 'ECDH-ES using Concat KDF and CEK wrapped with A128KW'), ('ECDH-ES+A192KW', 'ECDH-ES using Concat KDF and CEK wrapped with A192KW'), ('ECDH-ES+A256KW', 'ECDH-ES using Concat KDF and CEK wrapped with A256KW'), ('A128GCMKW', 'Key wrapping with AES GCM using 128 bit key'), ('A192GCMKW', 'Key wrapping with AES GCM using 192 bit key'), ('A256GCMKW', 'Key wrapping with AES GCM using 256 bit key'), ('PBES2-HS256+A128KW', 'PBES2 with HMAC SHA-256 and A128KW wrapping'), ('PBES2-HS384+A192KW', 'PBES2 with HMAC SHA-384 and A192KW wrapping'), ('PBES2-HS512+A256KW', 'PBES2 with HMAC SHA-512 and A256KW wrapping')], default=None, help_text='Algorithm used to encrypt Access Token.', max_length=18, null=True, verbose_name='JWE Algorithm to Encrypt'),
        ),
        migrations.AddField(
            model_name='client',
            name='at_jwe_enc',
            field=models.CharField(choices=[('A128CBC-HS256', 'AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm'), ('A192CBC-HS384', 'AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm'), ('A256CBC-HS512', 'AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm'), ('A128GCM', 'AES GCM using 128 bit key'), ('A192GCM', 'AES GCM using 192 bit key'), ('A256GCM', 'AES GCM using 256 bit key')], default=None, help_text='Algorithm used to encode JWE Access Tokens.', max_length=13, null=True, verbose_name='JWE Algorithm to Encode'),
        ),
        migrations.AddField(
            model_name='client',
            name='at_jwk_type',
            field=models.CharField(choices=[('OCT128', '(OCT128) 128 bit symmetric key'), ('OCT256', '(OCT256) 256 bit symmetric key'), ('OCT384', '(OCT384) 384 bit symmetric key'), ('OCT512', '(OCT512) 512 bit symmetric key'), ('RSA2048', '(RSA2048) RSA 2048 bits'), ('RSA3072', '(RSA3072) RSA 3072 bits'), ('RSA4096', '(RSA4096) RSA 4096 bits'), ('EC256', '(EC256) Elliptic Curve using P-256'), ('EC384', '(EC384) Elliptic Curve using P-384'), ('EC521', '(EC521) Elliptic Curve using P-521'), ('ECsecp256k1', '(ECsecp256k1) Elliptic Curve using secp256k1'), ('OKPEd25519', '(OKPEd25519) Edwards Curve using Ed25519'), ('OKPEd448', '(OKPEd448) Edwards Curve using Ed448'), ('OKPX25519', '(OKPX25519) Edwards Curve using X25519'), ('OKPX448', '(OKPX448) Edwards Curve using X448')], default='RSA4096', help_text='JWKKey to Sign the JWT Access Token.', max_length=11, null=True, verbose_name='JWKKey to Sign the JWT Access Token'),
        ),
        migrations.AddField(
            model_name='client',
            name='idtoken_jwe_alg',
            field=models.CharField(choices=[('RSA-OAEP', 'RSAES OAEP using default parameters'), ('RSA-OAEP-256', 'RSAES OAEP using SHA-256 and MGF1 with SHA-256'), ('A128KW', 'AES Key Wrap with default initial value using 128 bit key'), ('A192KW', 'AES Key Wrap with default initial value using 192 bit key'), ('A256KW', 'AES Key Wrap with default initial value using 256 bit key'), ('dir', 'Direct use of a shared symmetric key as the CEK'), ('ECDH-ES', 'Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF'), ('ECDH-ES+A128KW', 'ECDH-ES using Concat KDF and CEK wrapped with A128KW'), ('ECDH-ES+A192KW', 'ECDH-ES using Concat KDF and CEK wrapped with A192KW'), ('ECDH-ES+A256KW', 'ECDH-ES using Concat KDF and CEK wrapped with A256KW'), ('A128GCMKW', 'Key wrapping with AES GCM using 128 bit key'), ('A192GCMKW', 'Key wrapping with AES GCM using 192 bit key'), ('A256GCMKW', 'Key wrapping with AES GCM using 256 bit key'), ('PBES2-HS256+A128KW', 'PBES2 with HMAC SHA-256 and A128KW wrapping'), ('PBES2-HS384+A192KW', 'PBES2 with HMAC SHA-384 and A192KW wrapping'), ('PBES2-HS512+A256KW', 'PBES2 with HMAC SHA-512 and A256KW wrapping')], default='A128KW', help_text='Algorithm used to encrypt ID Tokens.', max_length=18, null=True, verbose_name='JWE Algorithm to Encrypt'),
        ),
        migrations.AddField(
            model_name='client',
            name='idtoken_jwe_enc',
            field=models.CharField(choices=[('A128CBC-HS256', 'AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm'), ('A192CBC-HS384', 'AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm'), ('A256CBC-HS512', 'AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm'), ('A128GCM', 'AES GCM using 128 bit key'), ('A192GCM', 'AES GCM using 192 bit key'), ('A256GCM', 'AES GCM using 256 bit key')], default='A128CBC-HS256', help_text='Algorithm used to encrypt ID Tokens.', max_length=13, null=True, verbose_name='JWE Algorithm to Encode'),
        ),
        migrations.AddField(
            model_name='client',
            name='idtoken_jwk_type',
            field=models.CharField(choices=[('OCT128', '(OCT128) 128 bit symmetric key'), ('OCT256', '(OCT256) 256 bit symmetric key'), ('OCT384', '(OCT384) 384 bit symmetric key'), ('OCT512', '(OCT512) 512 bit symmetric key'), ('RSA2048', '(RSA2048) RSA 2048 bits'), ('RSA3072', '(RSA3072) RSA 3072 bits'), ('RSA4096', '(RSA4096) RSA 4096 bits'), ('EC256', '(EC256) Elliptic Curve using P-256'), ('EC384', '(EC384) Elliptic Curve using P-384'), ('EC521', '(EC521) Elliptic Curve using P-521'), ('ECsecp256k1', '(ECsecp256k1) Elliptic Curve using secp256k1'), ('OKPEd25519', '(OKPEd25519) Edwards Curve using Ed25519'), ('OKPEd448', '(OKPEd448) Edwards Curve using Ed448'), ('OKPX25519', '(OKPX25519) Edwards Curve using X25519'), ('OKPX448', '(OKPX448) Edwards Curve using X448')], default='RSA4096', help_text='JWKKey to Sign the JWT Id Token headers.', max_length=11, verbose_name='JWKKey to Sign the JWT Id Token'),
        ),
        migrations.AddField(
            model_name='client',
            name='rt_alg',
            field=models.CharField(choices=[('Opaque', 'None'), ('HS256', 'HS256'), ('RS256', 'RS256')], default='RS256', help_text='Algorithm used to encode Refresh Tokens.', max_length=10, null=True, verbose_name='Refresh Token JWT Algorithm'),
        ),
        migrations.AddField(
            model_name='client',
            name='rt_jwe_alg',
            field=models.CharField(choices=[('RSA-OAEP', 'RSAES OAEP using default parameters'), ('RSA-OAEP-256', 'RSAES OAEP using SHA-256 and MGF1 with SHA-256'), ('A128KW', 'AES Key Wrap with default initial value using 128 bit key'), ('A192KW', 'AES Key Wrap with default initial value using 192 bit key'), ('A256KW', 'AES Key Wrap with default initial value using 256 bit key'), ('dir', 'Direct use of a shared symmetric key as the CEK'), ('ECDH-ES', 'Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF'), ('ECDH-ES+A128KW', 'ECDH-ES using Concat KDF and CEK wrapped with A128KW'), ('ECDH-ES+A192KW', 'ECDH-ES using Concat KDF and CEK wrapped with A192KW'), ('ECDH-ES+A256KW', 'ECDH-ES using Concat KDF and CEK wrapped with A256KW'), ('A128GCMKW', 'Key wrapping with AES GCM using 128 bit key'), ('A192GCMKW', 'Key wrapping with AES GCM using 192 bit key'), ('A256GCMKW', 'Key wrapping with AES GCM using 256 bit key'), ('PBES2-HS256+A128KW', 'PBES2 with HMAC SHA-256 and A128KW wrapping'), ('PBES2-HS384+A192KW', 'PBES2 with HMAC SHA-384 and A192KW wrapping'), ('PBES2-HS512+A256KW', 'PBES2 with HMAC SHA-512 and A256KW wrapping')], default=None, help_text='Algorithm used to encrypt Refresh Token.', max_length=18, null=True, verbose_name='JWE Algorithm to Encrypt'),
        ),
        migrations.AddField(
            model_name='client',
            name='rt_jwe_enc',
            field=models.CharField(choices=[('A128CBC-HS256', 'AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm'), ('A192CBC-HS384', 'AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm'), ('A256CBC-HS512', 'AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm'), ('A128GCM', 'AES GCM using 128 bit key'), ('A192GCM', 'AES GCM using 192 bit key'), ('A256GCM', 'AES GCM using 256 bit key')], default=None, help_text='Algorithm used to encode JWE Refresh Tokens.', max_length=13, null=True, verbose_name='JWE Algorithm to Encode'),
        ),
        migrations.AddField(
            model_name='client',
            name='rt_jwk_type',
            field=models.CharField(choices=[('OCT128', '(OCT128) 128 bit symmetric key'), ('OCT256', '(OCT256) 256 bit symmetric key'), ('OCT384', '(OCT384) 384 bit symmetric key'), ('OCT512', '(OCT512) 512 bit symmetric key'), ('RSA2048', '(RSA2048) RSA 2048 bits'), ('RSA3072', '(RSA3072) RSA 3072 bits'), ('RSA4096', '(RSA4096) RSA 4096 bits'), ('EC256', '(EC256) Elliptic Curve using P-256'), ('EC384', '(EC384) Elliptic Curve using P-384'), ('EC521', '(EC521) Elliptic Curve using P-521'), ('ECsecp256k1', '(ECsecp256k1) Elliptic Curve using secp256k1'), ('OKPEd25519', '(OKPEd25519) Edwards Curve using Ed25519'), ('OKPEd448', '(OKPEd448) Edwards Curve using Ed448'), ('OKPX25519', '(OKPX25519) Edwards Curve using X25519'), ('OKPX448', '(OKPX448) Edwards Curve using X448')], default='RSA4096', help_text='JWKKey to Sign the JWT Refresh Token.', max_length=11, null=True, verbose_name='JWKKey to Sign the JWT Refresh Token'),
        ),
        migrations.AlterField(
            model_name='jwkkey',
            name='key_type',
            field=models.CharField(choices=[('OCT128', '(OCT128) 128 bit symmetric key'), ('OCT256', '(OCT256) 256 bit symmetric key'), ('OCT384', '(OCT384) 384 bit symmetric key'), ('OCT512', '(OCT512) 512 bit symmetric key'), ('RSA2048', '(RSA2048) RSA 2048 bits'), ('RSA3072', '(RSA3072) RSA 3072 bits'), ('RSA4096', '(RSA4096) RSA 4096 bits'), ('EC256', '(EC256) Elliptic Curve using P-256'), ('EC384', '(EC384) Elliptic Curve using P-384'), ('EC521', '(EC521) Elliptic Curve using P-521'), ('ECsecp256k1', '(ECsecp256k1) Elliptic Curve using secp256k1'), ('OKPEd25519', '(OKPEd25519) Edwards Curve using Ed25519'), ('OKPEd448', '(OKPEd448) Edwards Curve using Ed448'), ('OKPX25519', '(OKPX25519) Edwards Curve using X25519'), ('OKPX448', '(OKPX448) Edwards Curve using X448')], default='ES256', help_text='Specifies the cryptographic asymetric algorithms to sign the JWT Tokens', max_length=30, verbose_name='Key Type'),
        ),
    ]
